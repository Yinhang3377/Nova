{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"ARCHITECTURE/","title":"Architecture","text":"<p>Nova Architecture (initial)</p> <p>See project outline for modules: data_model, consensus, vm, network, storage, bridge, wallet, governance.</p> <p>Milestones: M0 prototype (PoH + data models), M1 testnet, M2 cross-chain features, M3 ecosystem.</p>"},{"location":"GH-PAGES-README/","title":"GH-Pages","text":"<p>This branch (gh-pages) is an automatically generated deployment of the project's documentation site.</p> <p>Do not edit files on this branch directly. Changes to the documentation should be made in the <code>docs/</code> source on the <code>main</code> branch and will be published automatically by GitHub Actions to this branch.</p> <p>If you need to force a change to the published site, update the docs source and open a PR targeting <code>main</code>.</p> <p>Generated by automation on behalf of the repository.</p>"},{"location":"MIGRATION/","title":"MIGRATION","text":""},{"location":"MIGRATION/#docs-migration-pr-summary","title":"Docs migration PR summary","text":"<p>This change moves long-form documentation into the MkDocs site under <code>docs/</code> and updates navigation so the site can be published.</p> <p>Files moved/added:</p> <ul> <li><code>docs/readme.md</code> \u2014 moved from root <code>README.md</code> (long-form content)</li> <li><code>docs/contributing.md</code> \u2014 moved from <code>CONTRIBUTING.md</code></li> <li><code>docs/index.md</code> \u2014 existing site index</li> </ul> <p>What changed in this PR:</p> <ul> <li>Root <code>README.md</code> replaced with a short landing that points to the site.</li> <li><code>mkdocs.yml</code> updated to include <code>readme.md</code> and <code>contributing.md</code> in nav.</li> <li>CI workflow for docs is already present (<code>.github/workflows/docs.yml</code>) and will build &amp; deploy on push to <code>main</code> or on tags.</li> </ul> <p>Validation steps for reviewers:</p> <ol> <li>Review moved pages for correct links and relative paths.</li> <li>Merge PR and ensure Actions run <code>docs: build &amp; deploy</code> completes successfully.</li> <li>If Pages are not yet enabled, enable Pages in repository Settings and set Source to <code>gh-pages</code> branch.</li> </ol> <p>Local preview:</p> <p>Install mkdocs &amp; material theme and run:</p> <pre><code>pip install mkdocs mkdocs-material\nmkdocs serve\n</code></pre>"},{"location":"MIGRATION/#admin-checklist-action-items-before-or-after-merge","title":"Admin checklist (action items before or after merge)","text":"<ul> <li>[ ] Go to Repository \u2192 Settings \u2192 Pages and set Source to <code>gh-pages</code> branch (or verify the branch after first deployment).</li> <li>[ ] If using a custom domain, add DNS records and configure the custom domain in Pages settings.</li> <li>[ ] Verify <code>GITHUB_TOKEN</code> has repository write permissions in repository settings if your organization policy restricts Actions permissions.</li> <li>[ ] After merging, check Actions \u2192 docs: build &amp; deploy run logs to confirm <code>site/</code> was pushed to <code>gh-pages</code>.</li> <li>[ ] Visit https://Yinhang3377.github.io/Nova/ to validate content.</li> </ul>"},{"location":"STORAGE/","title":"Storage backends and factory","text":"<p>This document explains the minimal <code>Storage</code> trait and the <code>factory::open_backend</code> helper used by the <code>nova-cli</code> simulation command.</p>"},{"location":"STORAGE/#storage-trait","title":"Storage trait","text":"<p>Located at <code>nova-core/src/storage.rs</code>. The trait is intentionally minimal for the scaffold:</p> <ul> <li>put(key: Vec, value: Vec) <li>get(key: &amp;[u8]) -&gt; Option&gt; <li>delete(key: &amp;[u8])</li> <li>contains_key(key: &amp;[u8]) -&gt; bool</li> <p>Keys and values are raw byte vectors to keep the interface low-level and flexible for different backends.</p>"},{"location":"STORAGE/#factory-open_backendname","title":"Factory: <code>open_backend(name)</code>","text":"<p>Implemented in <code>nova-core/src/storage/factory.rs</code>. It returns a boxed <code>Storage</code> trait object for a backend name. Current supported names:</p> <ul> <li><code>mem</code> \u2014 in-memory <code>MemDb</code> (default)</li> <li><code>rocks</code> \u2014 <code>RocksDbStub</code> placeholder (delegates to MemDb). Replace with a RocksDB adapter when ready.</li> <li><code>sled</code> \u2014 <code>SledDbStub</code> placeholder (delegates to MemDb). Replace with a sled adapter when ready.</li> </ul> <p>If an unknown name is provided, the factory currently falls back to <code>mem</code>.</p>"},{"location":"STORAGE/#how-to-add-a-real-backend","title":"How to add a real backend","text":"<ol> <li>Add a module under <code>nova-core/src/storage/&lt;backend&gt;.rs</code>.</li> <li>Implement the <code>Storage</code> trait for your backend type. Use <code>Send + Sync</code> semantics.</li> <li>Wire the backend into <code>factory::open_backend</code> so it can be chosen by name.</li> <li>Add tests that exercise put/get/delete and concurrency where appropriate.</li> </ol> <p>If the backend requires native dependencies (e.g. RocksDB), add them to <code>nova-core/Cargo.toml</code> and update CI to install any required system packages.</p>"},{"location":"STORAGE/#testing","title":"Testing","text":"<ul> <li>The <code>nova-cli simulate</code> command uses <code>factory::open_backend</code> and the <code>--backend</code> flag to choose a backend. The integration test <code>nova-cli/tests/integration_simulate.rs</code> verifies the default <code>mem</code> behavior and <code>--backend none</code> behavior.</li> </ul>"},{"location":"STORAGE/#notes","title":"Notes","text":"<p>These adapters are intentionally minimal. They provide a stable interface for upper layers to integrate real storage backends later.</p>"},{"location":"contributing/","title":"+ Contributing to Nova","text":"<p>Thanks for wanting to contribute! This document explains the project's workflow, CI checks, and how to run tests and linters locally so your PRs land cleanly.</p>"},{"location":"contributing/#quick-checklist-for-prs","title":"Quick checklist for PRs","text":"<ul> <li>Fork the repository and create a feature branch.</li> <li>Run the formatting and lint checks locally:</li> </ul> <pre><code>cargo fmt --all\ncargo clippy --all -- -D warnings\n</code></pre> <ul> <li>Run the test suite for the crate you changed. Examples:</li> </ul> <pre><code># run all workspace tests (slower)\ncargo test --workspace\n\n# run only nova-core tests\ncargo test -p nova-core\n\n# run only nova-cli tests\ncargo test -p nova-cli\n</code></pre> <ul> <li> <p>If you modify public APIs or add persisted types, update <code>docs/ARCHITECTURE.md</code> and add unit tests under the owning crate.</p> </li> <li> <p>Make sure commits are atomic and follow conventional commit style where appropriate (e.g., <code>feat:</code>, <code>fix:</code>, <code>chore:</code>).</p> </li> </ul>"},{"location":"contributing/#ci-checks","title":"CI checks","text":"<p>The repository uses GitHub Actions to enforce:</p> <ul> <li><code>cargo fmt --all -- --check</code> (formatting)</li> <li><code>cargo clippy --all -- -D warnings</code> (lints as errors)</li> <li><code>cargo test --workspace --no-fail-fast</code> (unit and integration tests)</li> <li>A runtime smoke check that executes <code>nova-cli simulate --count 1 --json</code></li> </ul> <p>If any of these fail, CI will block merge.</p>"},{"location":"contributing/#local-development-tips","title":"Local development tips","text":"<ul> <li>Use the repository's <code>rust-toolchain.toml</code> so your local toolchain matches CI:</li> </ul> <pre><code>rustup override set stable\n</code></pre> <ul> <li> <p>To speed up iteration while developing a crate, run <code>cargo test -p &lt;crate&gt;</code> and use <code>cargo watch</code> (install via <code>cargo install cargo-watch</code>) for auto-running tests during editing.</p> </li> <li> <p>Run integration tests (the ones under <code>tests/</code>) with:</p> </li> </ul> <pre><code>cargo test -p nova-cli --test integration_simulate\n</code></pre>"},{"location":"contributing/#reporting-issues-and-feature-requests","title":"Reporting issues and feature requests","text":"<p>Open issues in the repository and use labels like <code>bug</code>, <code>enhancement</code>, or <code>question</code>. Provide a minimal reproduction when possible.</p>"},{"location":"contributing/#license-code-of-conduct","title":"License &amp; Code of Conduct","text":"<p>By contributing you agree to license your contributions under the project's license (see <code>LICENSE</code>). Please follow the repository's code of conduct and be respectful.</p>"},{"location":"readme/","title":"README","text":"<pre><code># Nova\nA new beginning\n\n[![CI](https://github.com/Yinhang3377/Nova/actions/workflows/ci.yml/badge.svg)](https://github.com/Yinhang3377/Nova/actions/workflows/ci.yml)\n\n[Release v0.1.0](https://github.com/Yinhang3377/Nova/releases/tag/v0.1.0)\n\n## Nova (monorepo) - initial scaffold\n\nThis repository is a scaffold for the Nova blockchain project. It contains:\n\n- `nova-core`: Core primitives and runtime components\n- `nova-cli`: Command-line interface for wallets and node control\n- `docs`: Design documents and roadmap\n- `test-utils`: Test harness and simulators\n\nThis scaffold is intentionally minimal and designed to be expanded per the Nova project outline.\n\nSee developer notes in [docs/STORAGE.md](STORAGE.md) for details on storage backends and the test-friendly factory.\n\n## `nova-cli simulate` backend option\n\nThe `simulate` command supports a `--backend` flag to control persistence of generated blocks:\n\n- `--backend mem` (default): store generated blocks in an in-memory storage backend (useful for tests and local simulations).\n- `--backend none`: do not persist generated blocks (backward-compatible output-only behavior).\n\nExamples:\n\n```bash\n# Run 5 simulated blocks and persist them in memory (default)\nnova-cli simulate --count 5 --json\n\n# Run 2 simulated blocks without persisting\nnova-cli simulate --count 2 --json --backend none\n```\n\n</code></pre>"}]}